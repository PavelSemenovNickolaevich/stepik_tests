package org.stepic.tests;

import com.codeborne.selenide.CollectionCondition;
import com.codeborne.selenide.Condition;
import io.qameta.allure.Description;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.stepic.helpers.DriverUtils;

import static com.codeborne.selenide.Condition.visible;
import static com.codeborne.selenide.Selectors.byText;
import static com.codeborne.selenide.Selenide.*;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;
import static org.openqa.selenium.By.id;
import static org.stepic.helpers.TestData.*;


public class GeneratedTests extends TestBase {

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url 'https://stepik.org'", () ->
                open("https://stepik.org"));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }

    @Test
    @Description("Page title should have header text")
    @DisplayName("Page title test")
    void titleTest() throws InterruptedException {
        step("Open url 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
            setEnglishLanguage();
        });
        step("Catalog · Stepik", () -> {
            String expectedTitle = "Catalog · Stepik";
            sleep(1000);
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test()
    @Description("New user should be registered")
    @DisplayName("Registration test")
    void shouldRegistrationTest() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
        });
        step("Press button 'Register'", () -> {
            $(By.cssSelector(".navbar__auth_reg")).click();
        });
        step("Fill the field: name, email, password", () -> {
            $(id("id_registration_full-name")).setValue(generateName);
            $(id("id_registration_email")).setValue(generateEmail);
            $(id("id_registration_password")).setValue(generatePassword);
        });
        step("Confirm registration", () -> {
            $x("//button[@type='submit']").click();
        });
        step("Display icon with profile", () -> {
            $x("//button[@aria-label='Profile']").shouldHave(Condition.exist);
        });
    }

    @Test()
    @Description("User should be authorized")
    @DisplayName("Authorization test")
    void authorizationTest() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
            setEnglishLanguage();
        });
        step("Press button 'Log In'", () -> {
            $(".navbar__auth_login").click();
        });
        step("Fill the field: name, email, password", () -> {
            $(id("id_login_email")).setValue("Terminator666@gmail.com");
            $(id("id_login_password")).setValue("terminator666");
        });
        step("Confirm authorization", () -> {
            $x("//button[@type='submit']").click();
        });
        step("Display icon with profile", () -> {
            $x("//button[@aria-label='Profile']").shouldHave(Condition.exist);
        });
    }

    @Test()
    @Description("User should logout")
    @DisplayName("Logout test")
    void shouldLogOutTest() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
            setEnglishLanguage();
        });
        step("Press button 'Log In'", () -> {
            $(".navbar__auth_login").click();
        });
        step("Fill the field: name, email, password", () -> {
            $x("//input[@id='id_login_email']").setValue("Terminator666@gmail.com");
            $x("//input[@id='id_login_password']").setValue("terminator666");
        });
        step("Confirm authorization", () -> {
            $x("//button[@type='submit']").click();
        });
        step("Display actions in the profile action", () -> {
            $x("//button[@aria-label='Profile']").click();
        });
        step("Click logout action", () -> {
            $(byText("Logout")).click();
        });
        step("Confirmation action", () -> {
            $(byText("OK")).click();
        });
        step("Display authorization/registration window", () -> {
            $(".sign-form__input-group").shouldBe(visible);
            $("a[data-tab-name='login']").shouldBe(visible).shouldHave(Condition.text("Войти"));
            $x(("//a[@data-tab-name='registration']")).shouldBe(visible).shouldHave(Condition.text("Регистрация"));
        });
    }

//    @Test()
//    @Description("Interface should be changed by different languages")
//    @DisplayName("Change language interface")
//    void shouldChangeLanguageInterface() {
//        step("open 'https://stepik.org/'", () -> {
//            open("https://stepik.org/");
//        });
//        step("Press button languages", () -> {
//            $(By.id("ember191")).click();
//            int i = 0;
//            while (i < $$x("//li[@class='menu-item']").size()) {
//                $$x("//li[@class='menu-item']").get(i).click();
//                switch (i) {
//                    case 0:
//                        String placeholderBe = $x("//input[@placeholder='Пошук…']").getAttribute("placeholder");
//                        assertThat(placeholderBe).isEqualTo("Пошук…");
//                        break;
//                    case 1:
//                        String placeholderDe = $x("//input[@placeholder='Suchen']").getAttribute("placeholder");
//                        assertThat(placeholderDe).isEqualTo("Suchen");
//                        break;
//                    case 2:
//                        String placeholderEn = $x("//input[@placeholder='Search']").getAttribute("placeholder");
//                        assertThat(placeholderEn).isEqualTo("Search");
//                        break;
//                    case 3:
//                        String placeholderEs = $x("//input[@placeholder='Escribe para buscar']").getAttribute("placeholder");
//                        assertThat(placeholderEs).isEqualTo("Escribe para buscar");
//                        break;
//                    case 4:
//                        String placeholderPt = $x("//input[@placeholder='Procurar']").getAttribute("placeholder");
//                        assertThat(placeholderPt).isEqualTo("Procurar");
//                        break;
//                    case 5:
//                        String placeholderRu = $x("//input[@placeholder='Поиск…']").getAttribute("placeholder");
//                        assertThat(placeholderRu).isEqualTo("Поиск…");
//                        break;
//                    case 6:
//                        String placeholderUk = $x("//input[@placeholder='Пошук...']").getAttribute("placeholder");
//                        assertThat(placeholderUk).isEqualTo("Пошук...");
//                        break;
//                    case 7:
//                        String placeholderZh = $x("//input[@placeholder='键入要搜索']").getAttribute("placeholder");
//                        assertThat(placeholderZh).isEqualTo("键入要搜索");
//                        break;
//                }
//                i++;
//                $(By.id("ember191")).click();
//            }
//        });
//    }

    @Test
    @Description("Interface should be changed by different languages")
    @DisplayName("Change language interface")
    void shouldChangeLanguageInterface() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");

        });
        step("Press button languages", () -> {
            $(".navbar__down-arrow").click();
            $$x("//li[@class='menu-item']").get(0).click();
            String placeholderBe = $x("//input[@placeholder='Пошук…']").getAttribute("placeholder");
            assertThat(placeholderBe).isEqualTo("Пошук…");
        });
    }


    @Test()
    @Description("User should find results")
    @DisplayName("Search field")
    void shouldFindResultsFromSearch() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
        });
        step("Input 'Java' in search field", () -> {
            $(".search-form__input ").setValue("Java");
            $(".search-form__submit").click();
            $(".search-form__input ").sendKeys(Keys.ENTER);
        });
        step(" results with 'Java' are exist and visible and the first result contains Java", () -> {
            $$(".course-cards__item").shouldHave(CollectionCondition.sizeGreaterThan(0));
            String javaWord = "Java";
            String text = String.format("%s. Functional Programming", javaWord);
            $(".course-card__title", 0).shouldHave(Condition.text(text));
        });
    }

    @Test()
    @Description("User should find results by filters")
    @DisplayName("Search results by filters")
    void shouldFindResultsByFilters() {
        step("Open 'https://stepik.org/'", () -> {
            open("https://stepik.org/");
            setEnglishLanguage();
        });
        step("Choose filters: english language, with cert and Free", () -> {
            $(".search-form__input ").setValue("Java");
            //     $(tableSystemInfoBy).waitUntil(visible, 30000);
            $(".search-form__input ").sendKeys(Keys.ENTER);
            $(".select-box__toggle-btn").click();
            $(".select-box__option", 1).click();
            $(byText("With certificate")).click();
            $(byText("Free")).click();
        });
        step("Press 'Search' button", () -> {
            $(".search-form__submit").click();
        });
        step(" results with 'Java' are exist and visible and the first result contains Java", () -> {
            $$(".course-cards__item").shouldHave(CollectionCondition.sizeGreaterThan(0));
            String javaWord = "Java";
            String text = String.format("%s. Базовый курс", javaWord);
            $(".course-card__title", 0).shouldHave(Condition.text(text));
            String certificate = $x("//div[@class='course-card__widgets'][1]//span[@data-type='certificate']")
                    .getAttribute("aria-label");
            String price = $(".format-price_free", 0).getText();
            Assertions.assertEquals("This course issues a certificate", certificate);
            Assertions.assertEquals("Free", price);
        });
    }
}